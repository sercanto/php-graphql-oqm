#!/usr/bin/env php
<?php

$autoLoadFiles = [__DIR__ . '/../vendor/autoload.php', __DIR__ . '/../../../autoload.php'];

// Require autoload.php depending on environment
$autoLoadFound = false;
foreach ($autoLoadFiles as $autoLoadFile) {
	if (file_exists($autoLoadFile)) {
		require $autoLoadFile;
		$autoLoadFound = true;
	}
}
// Exit if autoload.php is not required
if (!$autoLoadFound) {
	throw new RuntimeException('Could not find vendor/autoload.php');
}

use GraphQL\Client;
use GraphQL\SchemaGenerator\SchemaClassGenerator;

$endpointUrl = readline('GraphlQL endpoint URL: ');

$authHeaders    = [];
$authHeaderName = readline('Authorization header name: ');
if (!empty($authHeaderName)) {
	$authHeaderValue = readline('Authorization header value: ');
	$authHeaders = [$authHeaderName => $authHeaderValue];
}

$customWriteDir = readline('Custom classes writing dir (optional): ');
if (empty($customWriteDir)) $customWriteDir = '';

$client  = new Client($endpointUrl, $authHeaders);

print "-------------------------------------------------\n";
print "Generating Query schema objects from schema types\n";
print "-------------------------------------------------\n";
$scannerQuery = new SchemaClassGenerator($client, $customWriteDir, 'query');
$scannerQuery->generateRootQueryObject();

print "-------------------------------------------\n";
print "Query schema objects generation complete\n";
print "-------------------------------------------\n";

print "----------------------------------------------------\n";
print "Generating Mutation schema objects from schema types\n";
print "----------------------------------------------------\n";
$scannerMutation = new SchemaClassGenerator($client, $customWriteDir, 'mutation');
$scannerMutation->generateRootMutationObject();

print "-------------------------------------------\n";
print "Mutation schema objects generation complete\n";
print "-------------------------------------------\n";
